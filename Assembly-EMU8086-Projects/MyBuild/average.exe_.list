EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
average.exe_ -- emu8086 assembler version: 4.08  
 
[ 6/8/2021  --  7:40:30 PM ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       DATA SEGMENT
[   2]    0000: 00                                    	SUM DB 01 DUP(?)
[   3]    0001: 00                                    	AVG DB 01 DUP(?)
[   4]        :                                       DATA ENDS
[   5]        :                                       CODE SEGMENT
[   6]        :                                       	ASSUME CS:CODE DS :DATA
[   7]    0010:                                       START:
[   8]    0010: B8 00 00                              	MOV AX,DATA
[   9]    0013: 8E D8                                 	MOV DS,AX
[  10]    0015: B8 00 00                              	MOV AX,00
[  11]    0018: B0 0E                                 	MOV AL,14
[  12]    001A: 04 A2                                 	ADD AL,162
[  13]    001C: 04 55                                 	ADD AL,85
[  14]    001E: 04 36                                 	ADD AL,54
[  15]    0020: A2 00 00                              	MOV SUM,AL
[  16]    0023: B3 04                                 	MOV BL,04
[  17]    0025: F6 F3                                 	DIV BL
[  18]    0027: A2 01 00                              	MOV AVG,AL
[  19]        :                                       CODE ENDS
[  20]        :                                       END START
[  21]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: 2A      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 02      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 00      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 00      -   SP - stack pointer (h.byte)
0012: 5E      -   check sum (l.byte)
0013: D5      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 01      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 01      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 01      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
